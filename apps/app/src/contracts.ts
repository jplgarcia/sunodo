// Generated by @wagmi/cli@1.0.0 on 5/14/2023 at 5:21:47 PM
import {
    useContractRead,
    UseContractReadConfig,
    useContractWrite,
    UseContractWriteConfig,
    usePrepareContractWrite,
    UsePrepareContractWriteConfig,
    Address,
    useContractEvent,
    UseContractEventConfig,
} from 'wagmi'
import {
    ReadContractResult,
    WriteContractMode,
    PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20DAppFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20DAppFactoryABI = [
    {
        stateMutability: 'nonpayable',
        type: 'constructor',
        inputs: [
            {
                name: '_factory',
                internalType: 'contract ICartesiIPFSDAppFactory',
                type: 'address',
            },
            {
                name: '_token',
                internalType: 'contract IERC20',
                type: 'address',
            },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'factory',
        outputs: [
            {
                name: '',
                internalType: 'contract ICartesiIPFSDAppFactory',
                type: 'address',
            },
        ],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            {
                name: '_consensus',
                internalType: 'contract IConsensus',
                type: 'address',
            },
            { name: '_dappOwner', internalType: 'address', type: 'address' },
            { name: '_templateHash', internalType: 'bytes32', type: 'bytes32' },
            { name: '_cid', internalType: 'string', type: 'string' },
            { name: '_salary', internalType: 'uint128', type: 'uint128' },
            { name: '_funds', internalType: 'uint128', type: 'uint128' },
        ],
        name: 'newApplication',
        outputs: [
            { name: '', internalType: 'contract CartesiDApp', type: 'address' },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'paymentSystem',
        outputs: [
            {
                name: '',
                internalType: 'contract IConsensusPaymentSystem',
                type: 'address',
            },
        ],
    },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ControlledDAppFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const controlledDAppFactoryABI = [
    {
        stateMutability: 'nonpayable',
        type: 'constructor',
        inputs: [
            {
                name: '_factory',
                internalType: 'contract ICartesiDAppFactory',
                type: 'address',
            },
        ],
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'chainid',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
            {
                name: 'dapp',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
            {
                name: 'until',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'FinancialRunway',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'chainid',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
            {
                name: 'dapp',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
            {
                name: 'location',
                internalType: 'string',
                type: 'string',
                indexed: false,
            },
        ],
        name: 'MachineLocation',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'role',
                internalType: 'bytes32',
                type: 'bytes32',
                indexed: true,
            },
            {
                name: 'previousAdminRole',
                internalType: 'bytes32',
                type: 'bytes32',
                indexed: true,
            },
            {
                name: 'newAdminRole',
                internalType: 'bytes32',
                type: 'bytes32',
                indexed: true,
            },
        ],
        name: 'RoleAdminChanged',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'role',
                internalType: 'bytes32',
                type: 'bytes32',
                indexed: true,
            },
            {
                name: 'account',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'sender',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
        ],
        name: 'RoleGranted',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'role',
                internalType: 'bytes32',
                type: 'bytes32',
                indexed: true,
            },
            {
                name: 'account',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'sender',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
        ],
        name: 'RoleRevoked',
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'CONTROLLER_ROLE',
        outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'DEFAULT_ADMIN_ROLE',
        outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
        name: 'getRoleAdmin',
        outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'role', internalType: 'bytes32', type: 'bytes32' },
            { name: 'account', internalType: 'address', type: 'address' },
        ],
        name: 'grantRole',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'role', internalType: 'bytes32', type: 'bytes32' },
            { name: 'account', internalType: 'address', type: 'address' },
        ],
        name: 'hasRole',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            {
                name: '_consensus',
                internalType: 'contract IConsensus',
                type: 'address',
            },
            { name: '_dappOwner', internalType: 'address', type: 'address' },
            { name: '_templateHash', internalType: 'bytes32', type: 'bytes32' },
            { name: '_cid', internalType: 'string', type: 'string' },
        ],
        name: 'newApplication',
        outputs: [
            { name: '', internalType: 'contract CartesiDApp', type: 'address' },
        ],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'role', internalType: 'bytes32', type: 'bytes32' },
            { name: 'account', internalType: 'address', type: 'address' },
        ],
        name: 'renounceRole',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'role', internalType: 'bytes32', type: 'bytes32' },
            { name: 'account', internalType: 'address', type: 'address' },
        ],
        name: 'revokeRole',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: '_dapp', internalType: 'address', type: 'address' }],
        name: 'start',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: '_dapp', internalType: 'address', type: 'address' }],
        name: 'stop',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' },
        ],
        name: 'supportsInterface',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
] as const

/**
 *
 */
export const controlledDAppFactoryAddress = {
    31337: '0xfCE0535AC7545532a34CB7E89b2D88DFc308Cd47',
} as const

/**
 *
 */
export const controlledDAppFactoryConfig = {
    address: controlledDAppFactoryAddress,
    abi: controlledDAppFactoryABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20DAppSystem
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const erc20DAppSystemABI = [
    {
        stateMutability: 'nonpayable',
        type: 'constructor',
        inputs: [
            {
                name: '_factory',
                internalType: 'contract ICartesiIPFSDAppFactory',
                type: 'address',
            },
        ],
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'factory',
                internalType: 'contract ERC20DAppFactory',
                type: 'address',
                indexed: false,
            },
            {
                name: 'token',
                internalType: 'contract IERC20',
                type: 'address',
                indexed: false,
            },
        ],
        name: 'ERC20DAppFactoryCreated',
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'factory',
        outputs: [
            {
                name: '',
                internalType: 'contract ICartesiIPFSDAppFactory',
                type: 'address',
            },
        ],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            {
                name: '_token',
                internalType: 'contract IERC20',
                type: 'address',
            },
        ],
        name: 'newERC20DAppFactory',
        outputs: [
            {
                name: '',
                internalType: 'contract ERC20DAppFactory',
                type: 'address',
            },
        ],
    },
] as const

/**
 *
 */
export const erc20DAppSystemAddress = {
    31337: '0x7A25a075e6976F19D33f3e34E2F2EBF776fBcA4a',
} as const

/**
 *
 */
export const erc20DAppSystemConfig = {
    address: erc20DAppSystemAddress,
    abi: erc20DAppSystemABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
    {
        type: 'event',
        inputs: [
            { name: 'owner', type: 'address', indexed: true },
            { name: 'spender', type: 'address', indexed: true },
            { name: 'value', type: 'uint256', indexed: false },
        ],
        name: 'Approval',
    },
    {
        type: 'event',
        inputs: [
            { name: 'from', type: 'address', indexed: true },
            { name: 'to', type: 'address', indexed: true },
            { name: 'value', type: 'uint256', indexed: false },
        ],
        name: 'Transfer',
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'owner', type: 'address' },
            { name: 'spender', type: 'address' },
        ],
        name: 'allowance',
        outputs: [{ type: 'uint256' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'spender', type: 'address' },
            { name: 'amount', type: 'uint256' },
        ],
        name: 'approve',
        outputs: [{ type: 'bool' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'account', type: 'address' }],
        name: 'balanceOf',
        outputs: [{ type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'decimals',
        outputs: [{ type: 'uint8' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'name',
        outputs: [{ type: 'string' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'symbol',
        outputs: [{ type: 'string' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'totalSupply',
        outputs: [{ type: 'uint256' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'recipient', type: 'address' },
            { name: 'amount', type: 'uint256' },
        ],
        name: 'transfer',
        outputs: [{ type: 'bool' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'sender', type: 'address' },
            { name: 'recipient', type: 'address' },
            { name: 'amount', type: 'uint256' },
        ],
        name: 'transferFrom',
        outputs: [{ type: 'bool' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'spender', type: 'address' },
            { name: 'addedValue', type: 'uint256' },
        ],
        name: 'increaseAllowance',
        outputs: [{ type: 'bool' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'spender', type: 'address' },
            { name: 'subtractedValue', type: 'uint256' },
        ],
        name: 'decreaseAllowance',
        outputs: [{ type: 'bool' }],
    },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721ABI = [
    {
        type: 'event',
        inputs: [
            { name: 'owner', type: 'address', indexed: true },
            { name: 'spender', type: 'address', indexed: true },
            { name: 'tokenId', type: 'uint256', indexed: true },
        ],
        name: 'Approval',
    },
    {
        type: 'event',
        inputs: [
            { name: 'owner', type: 'address', indexed: true },
            { name: 'operator', type: 'address', indexed: true },
            { name: 'approved', type: 'bool', indexed: false },
        ],
        name: 'ApprovalForAll',
    },
    {
        type: 'event',
        inputs: [
            { name: 'from', type: 'address', indexed: true },
            { name: 'to', type: 'address', indexed: true },
            { name: 'tokenId', type: 'uint256', indexed: true },
        ],
        name: 'Transfer',
    },
    {
        stateMutability: 'payable',
        type: 'function',
        inputs: [
            { name: 'spender', type: 'address' },
            { name: 'tokenId', type: 'uint256' },
        ],
        name: 'approve',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'account', type: 'address' }],
        name: 'balanceOf',
        outputs: [{ type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'tokenId', type: 'uint256' }],
        name: 'getApproved',
        outputs: [{ type: 'address' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'owner', type: 'address' },
            { name: 'operator', type: 'address' },
        ],
        name: 'isApprovedForAll',
        outputs: [{ type: 'bool' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'name',
        outputs: [{ type: 'string' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'tokenId', type: 'uint256' }],
        name: 'ownerOf',
        outputs: [{ name: 'owner', type: 'address' }],
    },
    {
        stateMutability: 'payable',
        type: 'function',
        inputs: [
            { name: 'from', type: 'address' },
            { name: 'to', type: 'address' },
            { name: 'tokenId', type: 'uint256' },
        ],
        name: 'safeTransferFrom',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'from', type: 'address' },
            { name: 'to', type: 'address' },
            { name: 'id', type: 'uint256' },
            { name: 'data', type: 'bytes' },
        ],
        name: 'safeTransferFrom',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'operator', type: 'address' },
            { name: 'approved', type: 'bool' },
        ],
        name: 'setApprovalForAll',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'symbol',
        outputs: [{ type: 'string' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'index', type: 'uint256' }],
        name: 'tokenByIndex',
        outputs: [{ type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'owner', type: 'address' },
            { name: 'index', type: 'uint256' },
        ],
        name: 'tokenByIndex',
        outputs: [{ name: 'tokenId', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'tokenId', type: 'uint256' }],
        name: 'tokenURI',
        outputs: [{ type: 'string' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'totalSupply',
        outputs: [{ type: 'uint256' }],
    },
    {
        stateMutability: 'payable',
        type: 'function',
        inputs: [
            { name: 'sender', type: 'address' },
            { name: 'recipient', type: 'address' },
            { name: 'tokenId', type: 'uint256' },
        ],
        name: 'transferFrom',
        outputs: [],
    },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20DAppFactoryABI}__.
 */
export function useErc20DAppFactoryRead<
    TFunctionName extends string,
    TSelectData = ReadContractResult<typeof erc20DAppFactoryABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<
            typeof erc20DAppFactoryABI,
            TFunctionName,
            TSelectData
        >,
        'abi'
    > = {} as any,
) {
    return useContractRead({
        abi: erc20DAppFactoryABI,
        ...config,
    } as UseContractReadConfig<
        typeof erc20DAppFactoryABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20DAppFactoryABI}__ and `functionName` set to `"factory"`.
 */
export function useErc20DAppFactoryFactory<
    TFunctionName extends 'factory',
    TSelectData = ReadContractResult<typeof erc20DAppFactoryABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<
            typeof erc20DAppFactoryABI,
            TFunctionName,
            TSelectData
        >,
        'abi' | 'functionName'
    > = {} as any,
) {
    return useContractRead({
        abi: erc20DAppFactoryABI,
        functionName: 'factory',
        ...config,
    } as UseContractReadConfig<
        typeof erc20DAppFactoryABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20DAppFactoryABI}__ and `functionName` set to `"paymentSystem"`.
 */
export function useErc20DAppFactoryPaymentSystem<
    TFunctionName extends 'paymentSystem',
    TSelectData = ReadContractResult<typeof erc20DAppFactoryABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<
            typeof erc20DAppFactoryABI,
            TFunctionName,
            TSelectData
        >,
        'abi' | 'functionName'
    > = {} as any,
) {
    return useContractRead({
        abi: erc20DAppFactoryABI,
        functionName: 'paymentSystem',
        ...config,
    } as UseContractReadConfig<
        typeof erc20DAppFactoryABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20DAppFactoryABI}__.
 */
export function useErc20DAppFactoryWrite<
    TFunctionName extends string,
    TMode extends WriteContractMode = undefined,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof erc20DAppFactoryABI,
                  string
              >['request']['abi'],
              TFunctionName,
              TMode
          >
        : UseContractWriteConfig<
              typeof erc20DAppFactoryABI,
              TFunctionName,
              TMode
          > & {
              abi?: never
          } = {} as any,
) {
    return useContractWrite<typeof erc20DAppFactoryABI, TFunctionName, TMode>({
        abi: erc20DAppFactoryABI,
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20DAppFactoryABI}__ and `functionName` set to `"newApplication"`.
 */
export function useErc20DAppFactoryNewApplication<
    TMode extends WriteContractMode = undefined,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof erc20DAppFactoryABI,
                  'newApplication'
              >['request']['abi'],
              'newApplication',
              TMode
          > & { functionName?: 'newApplication' }
        : UseContractWriteConfig<
              typeof erc20DAppFactoryABI,
              'newApplication',
              TMode
          > & {
              abi?: never
              functionName?: 'newApplication'
          } = {} as any,
) {
    return useContractWrite<
        typeof erc20DAppFactoryABI,
        'newApplication',
        TMode
    >({
        abi: erc20DAppFactoryABI,
        functionName: 'newApplication',
        ...config,
    } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20DAppFactoryABI}__.
 */
export function usePrepareErc20DAppFactoryWrite<TFunctionName extends string>(
    config: Omit<
        UsePrepareContractWriteConfig<
            typeof erc20DAppFactoryABI,
            TFunctionName
        >,
        'abi'
    > = {} as any,
) {
    return usePrepareContractWrite({
        abi: erc20DAppFactoryABI,
        ...config,
    } as UsePrepareContractWriteConfig<
        typeof erc20DAppFactoryABI,
        TFunctionName
    >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20DAppFactoryABI}__ and `functionName` set to `"newApplication"`.
 */
export function usePrepareErc20DAppFactoryNewApplication(
    config: Omit<
        UsePrepareContractWriteConfig<
            typeof erc20DAppFactoryABI,
            'newApplication'
        >,
        'abi' | 'functionName'
    > = {} as any,
) {
    return usePrepareContractWrite({
        abi: erc20DAppFactoryABI,
        functionName: 'newApplication',
        ...config,
    } as UsePrepareContractWriteConfig<
        typeof erc20DAppFactoryABI,
        'newApplication'
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link controlledDAppFactoryABI}__.
 *
 *
 */
export function useControlledDAppFactoryRead<
    TFunctionName extends string,
    TSelectData = ReadContractResult<
        typeof controlledDAppFactoryABI,
        TFunctionName
    >,
>(
    config: Omit<
        UseContractReadConfig<
            typeof controlledDAppFactoryABI,
            TFunctionName,
            TSelectData
        >,
        'abi' | 'address'
    > & { chainId?: keyof typeof controlledDAppFactoryAddress } = {} as any,
) {
    return useContractRead({
        abi: controlledDAppFactoryABI,
        address: controlledDAppFactoryAddress[31337],
        ...config,
    } as UseContractReadConfig<
        typeof controlledDAppFactoryABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link controlledDAppFactoryABI}__ and `functionName` set to `"CONTROLLER_ROLE"`.
 *
 *
 */
export function useControlledDAppFactoryControllerRole<
    TFunctionName extends 'CONTROLLER_ROLE',
    TSelectData = ReadContractResult<
        typeof controlledDAppFactoryABI,
        TFunctionName
    >,
>(
    config: Omit<
        UseContractReadConfig<
            typeof controlledDAppFactoryABI,
            TFunctionName,
            TSelectData
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof controlledDAppFactoryAddress } = {} as any,
) {
    return useContractRead({
        abi: controlledDAppFactoryABI,
        address: controlledDAppFactoryAddress[31337],
        functionName: 'CONTROLLER_ROLE',
        ...config,
    } as UseContractReadConfig<
        typeof controlledDAppFactoryABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link controlledDAppFactoryABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 *
 *
 */
export function useControlledDAppFactoryDefaultAdminRole<
    TFunctionName extends 'DEFAULT_ADMIN_ROLE',
    TSelectData = ReadContractResult<
        typeof controlledDAppFactoryABI,
        TFunctionName
    >,
>(
    config: Omit<
        UseContractReadConfig<
            typeof controlledDAppFactoryABI,
            TFunctionName,
            TSelectData
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof controlledDAppFactoryAddress } = {} as any,
) {
    return useContractRead({
        abi: controlledDAppFactoryABI,
        address: controlledDAppFactoryAddress[31337],
        functionName: 'DEFAULT_ADMIN_ROLE',
        ...config,
    } as UseContractReadConfig<
        typeof controlledDAppFactoryABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link controlledDAppFactoryABI}__ and `functionName` set to `"getRoleAdmin"`.
 *
 *
 */
export function useControlledDAppFactoryGetRoleAdmin<
    TFunctionName extends 'getRoleAdmin',
    TSelectData = ReadContractResult<
        typeof controlledDAppFactoryABI,
        TFunctionName
    >,
>(
    config: Omit<
        UseContractReadConfig<
            typeof controlledDAppFactoryABI,
            TFunctionName,
            TSelectData
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof controlledDAppFactoryAddress } = {} as any,
) {
    return useContractRead({
        abi: controlledDAppFactoryABI,
        address: controlledDAppFactoryAddress[31337],
        functionName: 'getRoleAdmin',
        ...config,
    } as UseContractReadConfig<
        typeof controlledDAppFactoryABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link controlledDAppFactoryABI}__ and `functionName` set to `"hasRole"`.
 *
 *
 */
export function useControlledDAppFactoryHasRole<
    TFunctionName extends 'hasRole',
    TSelectData = ReadContractResult<
        typeof controlledDAppFactoryABI,
        TFunctionName
    >,
>(
    config: Omit<
        UseContractReadConfig<
            typeof controlledDAppFactoryABI,
            TFunctionName,
            TSelectData
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof controlledDAppFactoryAddress } = {} as any,
) {
    return useContractRead({
        abi: controlledDAppFactoryABI,
        address: controlledDAppFactoryAddress[31337],
        functionName: 'hasRole',
        ...config,
    } as UseContractReadConfig<
        typeof controlledDAppFactoryABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link controlledDAppFactoryABI}__ and `functionName` set to `"supportsInterface"`.
 *
 *
 */
export function useControlledDAppFactorySupportsInterface<
    TFunctionName extends 'supportsInterface',
    TSelectData = ReadContractResult<
        typeof controlledDAppFactoryABI,
        TFunctionName
    >,
>(
    config: Omit<
        UseContractReadConfig<
            typeof controlledDAppFactoryABI,
            TFunctionName,
            TSelectData
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof controlledDAppFactoryAddress } = {} as any,
) {
    return useContractRead({
        abi: controlledDAppFactoryABI,
        address: controlledDAppFactoryAddress[31337],
        functionName: 'supportsInterface',
        ...config,
    } as UseContractReadConfig<
        typeof controlledDAppFactoryABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link controlledDAppFactoryABI}__.
 *
 *
 */
export function useControlledDAppFactoryWrite<
    TFunctionName extends string,
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof controlledDAppFactoryAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof controlledDAppFactoryABI,
                  string
              >['request']['abi'],
              TFunctionName,
              TMode
          > & { address?: Address; chainId?: TChainId }
        : UseContractWriteConfig<
              typeof controlledDAppFactoryABI,
              TFunctionName,
              TMode
          > & {
              abi?: never
              address?: never
              chainId?: TChainId
          } = {} as any,
) {
    return useContractWrite<
        typeof controlledDAppFactoryABI,
        TFunctionName,
        TMode
    >({
        abi: controlledDAppFactoryABI,
        address: controlledDAppFactoryAddress[31337],
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link controlledDAppFactoryABI}__ and `functionName` set to `"grantRole"`.
 *
 *
 */
export function useControlledDAppFactoryGrantRole<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof controlledDAppFactoryAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof controlledDAppFactoryABI,
                  'grantRole'
              >['request']['abi'],
              'grantRole',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'grantRole'
          }
        : UseContractWriteConfig<
              typeof controlledDAppFactoryABI,
              'grantRole',
              TMode
          > & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'grantRole'
          } = {} as any,
) {
    return useContractWrite<
        typeof controlledDAppFactoryABI,
        'grantRole',
        TMode
    >({
        abi: controlledDAppFactoryABI,
        address: controlledDAppFactoryAddress[31337],
        functionName: 'grantRole',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link controlledDAppFactoryABI}__ and `functionName` set to `"newApplication"`.
 *
 *
 */
export function useControlledDAppFactoryNewApplication<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof controlledDAppFactoryAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof controlledDAppFactoryABI,
                  'newApplication'
              >['request']['abi'],
              'newApplication',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'newApplication'
          }
        : UseContractWriteConfig<
              typeof controlledDAppFactoryABI,
              'newApplication',
              TMode
          > & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'newApplication'
          } = {} as any,
) {
    return useContractWrite<
        typeof controlledDAppFactoryABI,
        'newApplication',
        TMode
    >({
        abi: controlledDAppFactoryABI,
        address: controlledDAppFactoryAddress[31337],
        functionName: 'newApplication',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link controlledDAppFactoryABI}__ and `functionName` set to `"renounceRole"`.
 *
 *
 */
export function useControlledDAppFactoryRenounceRole<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof controlledDAppFactoryAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof controlledDAppFactoryABI,
                  'renounceRole'
              >['request']['abi'],
              'renounceRole',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'renounceRole'
          }
        : UseContractWriteConfig<
              typeof controlledDAppFactoryABI,
              'renounceRole',
              TMode
          > & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'renounceRole'
          } = {} as any,
) {
    return useContractWrite<
        typeof controlledDAppFactoryABI,
        'renounceRole',
        TMode
    >({
        abi: controlledDAppFactoryABI,
        address: controlledDAppFactoryAddress[31337],
        functionName: 'renounceRole',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link controlledDAppFactoryABI}__ and `functionName` set to `"revokeRole"`.
 *
 *
 */
export function useControlledDAppFactoryRevokeRole<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof controlledDAppFactoryAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof controlledDAppFactoryABI,
                  'revokeRole'
              >['request']['abi'],
              'revokeRole',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'revokeRole'
          }
        : UseContractWriteConfig<
              typeof controlledDAppFactoryABI,
              'revokeRole',
              TMode
          > & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'revokeRole'
          } = {} as any,
) {
    return useContractWrite<
        typeof controlledDAppFactoryABI,
        'revokeRole',
        TMode
    >({
        abi: controlledDAppFactoryABI,
        address: controlledDAppFactoryAddress[31337],
        functionName: 'revokeRole',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link controlledDAppFactoryABI}__ and `functionName` set to `"start"`.
 *
 *
 */
export function useControlledDAppFactoryStart<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof controlledDAppFactoryAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof controlledDAppFactoryABI,
                  'start'
              >['request']['abi'],
              'start',
              TMode
          > & { address?: Address; chainId?: TChainId; functionName?: 'start' }
        : UseContractWriteConfig<
              typeof controlledDAppFactoryABI,
              'start',
              TMode
          > & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'start'
          } = {} as any,
) {
    return useContractWrite<typeof controlledDAppFactoryABI, 'start', TMode>({
        abi: controlledDAppFactoryABI,
        address: controlledDAppFactoryAddress[31337],
        functionName: 'start',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link controlledDAppFactoryABI}__ and `functionName` set to `"stop"`.
 *
 *
 */
export function useControlledDAppFactoryStop<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof controlledDAppFactoryAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof controlledDAppFactoryABI,
                  'stop'
              >['request']['abi'],
              'stop',
              TMode
          > & { address?: Address; chainId?: TChainId; functionName?: 'stop' }
        : UseContractWriteConfig<
              typeof controlledDAppFactoryABI,
              'stop',
              TMode
          > & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'stop'
          } = {} as any,
) {
    return useContractWrite<typeof controlledDAppFactoryABI, 'stop', TMode>({
        abi: controlledDAppFactoryABI,
        address: controlledDAppFactoryAddress[31337],
        functionName: 'stop',
        ...config,
    } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link controlledDAppFactoryABI}__.
 *
 *
 */
export function usePrepareControlledDAppFactoryWrite<
    TFunctionName extends string,
>(
    config: Omit<
        UsePrepareContractWriteConfig<
            typeof controlledDAppFactoryABI,
            TFunctionName
        >,
        'abi' | 'address'
    > & { chainId?: keyof typeof controlledDAppFactoryAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: controlledDAppFactoryABI,
        address: controlledDAppFactoryAddress[31337],
        ...config,
    } as UsePrepareContractWriteConfig<
        typeof controlledDAppFactoryABI,
        TFunctionName
    >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link controlledDAppFactoryABI}__ and `functionName` set to `"grantRole"`.
 *
 *
 */
export function usePrepareControlledDAppFactoryGrantRole(
    config: Omit<
        UsePrepareContractWriteConfig<
            typeof controlledDAppFactoryABI,
            'grantRole'
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof controlledDAppFactoryAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: controlledDAppFactoryABI,
        address: controlledDAppFactoryAddress[31337],
        functionName: 'grantRole',
        ...config,
    } as UsePrepareContractWriteConfig<
        typeof controlledDAppFactoryABI,
        'grantRole'
    >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link controlledDAppFactoryABI}__ and `functionName` set to `"newApplication"`.
 *
 *
 */
export function usePrepareControlledDAppFactoryNewApplication(
    config: Omit<
        UsePrepareContractWriteConfig<
            typeof controlledDAppFactoryABI,
            'newApplication'
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof controlledDAppFactoryAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: controlledDAppFactoryABI,
        address: controlledDAppFactoryAddress[31337],
        functionName: 'newApplication',
        ...config,
    } as UsePrepareContractWriteConfig<
        typeof controlledDAppFactoryABI,
        'newApplication'
    >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link controlledDAppFactoryABI}__ and `functionName` set to `"renounceRole"`.
 *
 *
 */
export function usePrepareControlledDAppFactoryRenounceRole(
    config: Omit<
        UsePrepareContractWriteConfig<
            typeof controlledDAppFactoryABI,
            'renounceRole'
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof controlledDAppFactoryAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: controlledDAppFactoryABI,
        address: controlledDAppFactoryAddress[31337],
        functionName: 'renounceRole',
        ...config,
    } as UsePrepareContractWriteConfig<
        typeof controlledDAppFactoryABI,
        'renounceRole'
    >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link controlledDAppFactoryABI}__ and `functionName` set to `"revokeRole"`.
 *
 *
 */
export function usePrepareControlledDAppFactoryRevokeRole(
    config: Omit<
        UsePrepareContractWriteConfig<
            typeof controlledDAppFactoryABI,
            'revokeRole'
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof controlledDAppFactoryAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: controlledDAppFactoryABI,
        address: controlledDAppFactoryAddress[31337],
        functionName: 'revokeRole',
        ...config,
    } as UsePrepareContractWriteConfig<
        typeof controlledDAppFactoryABI,
        'revokeRole'
    >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link controlledDAppFactoryABI}__ and `functionName` set to `"start"`.
 *
 *
 */
export function usePrepareControlledDAppFactoryStart(
    config: Omit<
        UsePrepareContractWriteConfig<typeof controlledDAppFactoryABI, 'start'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof controlledDAppFactoryAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: controlledDAppFactoryABI,
        address: controlledDAppFactoryAddress[31337],
        functionName: 'start',
        ...config,
    } as UsePrepareContractWriteConfig<
        typeof controlledDAppFactoryABI,
        'start'
    >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link controlledDAppFactoryABI}__ and `functionName` set to `"stop"`.
 *
 *
 */
export function usePrepareControlledDAppFactoryStop(
    config: Omit<
        UsePrepareContractWriteConfig<typeof controlledDAppFactoryABI, 'stop'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof controlledDAppFactoryAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: controlledDAppFactoryABI,
        address: controlledDAppFactoryAddress[31337],
        functionName: 'stop',
        ...config,
    } as UsePrepareContractWriteConfig<typeof controlledDAppFactoryABI, 'stop'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link controlledDAppFactoryABI}__.
 *
 *
 */
export function useControlledDAppFactoryEvent<TEventName extends string>(
    config: Omit<
        UseContractEventConfig<typeof controlledDAppFactoryABI, TEventName>,
        'abi' | 'address'
    > & { chainId?: keyof typeof controlledDAppFactoryAddress } = {} as any,
) {
    return useContractEvent({
        abi: controlledDAppFactoryABI,
        address: controlledDAppFactoryAddress[31337],
        ...config,
    } as UseContractEventConfig<typeof controlledDAppFactoryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link controlledDAppFactoryABI}__ and `eventName` set to `"FinancialRunway"`.
 *
 *
 */
export function useControlledDAppFactoryFinancialRunwayEvent(
    config: Omit<
        UseContractEventConfig<
            typeof controlledDAppFactoryABI,
            'FinancialRunway'
        >,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof controlledDAppFactoryAddress } = {} as any,
) {
    return useContractEvent({
        abi: controlledDAppFactoryABI,
        address: controlledDAppFactoryAddress[31337],
        eventName: 'FinancialRunway',
        ...config,
    } as UseContractEventConfig<
        typeof controlledDAppFactoryABI,
        'FinancialRunway'
    >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link controlledDAppFactoryABI}__ and `eventName` set to `"MachineLocation"`.
 *
 *
 */
export function useControlledDAppFactoryMachineLocationEvent(
    config: Omit<
        UseContractEventConfig<
            typeof controlledDAppFactoryABI,
            'MachineLocation'
        >,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof controlledDAppFactoryAddress } = {} as any,
) {
    return useContractEvent({
        abi: controlledDAppFactoryABI,
        address: controlledDAppFactoryAddress[31337],
        eventName: 'MachineLocation',
        ...config,
    } as UseContractEventConfig<
        typeof controlledDAppFactoryABI,
        'MachineLocation'
    >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link controlledDAppFactoryABI}__ and `eventName` set to `"RoleAdminChanged"`.
 *
 *
 */
export function useControlledDAppFactoryRoleAdminChangedEvent(
    config: Omit<
        UseContractEventConfig<
            typeof controlledDAppFactoryABI,
            'RoleAdminChanged'
        >,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof controlledDAppFactoryAddress } = {} as any,
) {
    return useContractEvent({
        abi: controlledDAppFactoryABI,
        address: controlledDAppFactoryAddress[31337],
        eventName: 'RoleAdminChanged',
        ...config,
    } as UseContractEventConfig<
        typeof controlledDAppFactoryABI,
        'RoleAdminChanged'
    >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link controlledDAppFactoryABI}__ and `eventName` set to `"RoleGranted"`.
 *
 *
 */
export function useControlledDAppFactoryRoleGrantedEvent(
    config: Omit<
        UseContractEventConfig<typeof controlledDAppFactoryABI, 'RoleGranted'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof controlledDAppFactoryAddress } = {} as any,
) {
    return useContractEvent({
        abi: controlledDAppFactoryABI,
        address: controlledDAppFactoryAddress[31337],
        eventName: 'RoleGranted',
        ...config,
    } as UseContractEventConfig<typeof controlledDAppFactoryABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link controlledDAppFactoryABI}__ and `eventName` set to `"RoleRevoked"`.
 *
 *
 */
export function useControlledDAppFactoryRoleRevokedEvent(
    config: Omit<
        UseContractEventConfig<typeof controlledDAppFactoryABI, 'RoleRevoked'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof controlledDAppFactoryAddress } = {} as any,
) {
    return useContractEvent({
        abi: controlledDAppFactoryABI,
        address: controlledDAppFactoryAddress[31337],
        eventName: 'RoleRevoked',
        ...config,
    } as UseContractEventConfig<typeof controlledDAppFactoryABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20DAppSystemABI}__.
 *
 *
 */
export function useErc20DAppSystemRead<
    TFunctionName extends string,
    TSelectData = ReadContractResult<typeof erc20DAppSystemABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<
            typeof erc20DAppSystemABI,
            TFunctionName,
            TSelectData
        >,
        'abi' | 'address'
    > & { chainId?: keyof typeof erc20DAppSystemAddress } = {} as any,
) {
    return useContractRead({
        abi: erc20DAppSystemABI,
        address: erc20DAppSystemAddress[31337],
        ...config,
    } as UseContractReadConfig<
        typeof erc20DAppSystemABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20DAppSystemABI}__ and `functionName` set to `"factory"`.
 *
 *
 */
export function useErc20DAppSystemFactory<
    TFunctionName extends 'factory',
    TSelectData = ReadContractResult<typeof erc20DAppSystemABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<
            typeof erc20DAppSystemABI,
            TFunctionName,
            TSelectData
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof erc20DAppSystemAddress } = {} as any,
) {
    return useContractRead({
        abi: erc20DAppSystemABI,
        address: erc20DAppSystemAddress[31337],
        functionName: 'factory',
        ...config,
    } as UseContractReadConfig<
        typeof erc20DAppSystemABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20DAppSystemABI}__.
 *
 *
 */
export function useErc20DAppSystemWrite<
    TFunctionName extends string,
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof erc20DAppSystemAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof erc20DAppSystemABI,
                  string
              >['request']['abi'],
              TFunctionName,
              TMode
          > & { address?: Address; chainId?: TChainId }
        : UseContractWriteConfig<
              typeof erc20DAppSystemABI,
              TFunctionName,
              TMode
          > & {
              abi?: never
              address?: never
              chainId?: TChainId
          } = {} as any,
) {
    return useContractWrite<typeof erc20DAppSystemABI, TFunctionName, TMode>({
        abi: erc20DAppSystemABI,
        address: erc20DAppSystemAddress[31337],
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20DAppSystemABI}__ and `functionName` set to `"newERC20DAppFactory"`.
 *
 *
 */
export function useErc20DAppSystemNewErc20DAppFactory<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof erc20DAppSystemAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof erc20DAppSystemABI,
                  'newERC20DAppFactory'
              >['request']['abi'],
              'newERC20DAppFactory',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'newERC20DAppFactory'
          }
        : UseContractWriteConfig<
              typeof erc20DAppSystemABI,
              'newERC20DAppFactory',
              TMode
          > & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'newERC20DAppFactory'
          } = {} as any,
) {
    return useContractWrite<
        typeof erc20DAppSystemABI,
        'newERC20DAppFactory',
        TMode
    >({
        abi: erc20DAppSystemABI,
        address: erc20DAppSystemAddress[31337],
        functionName: 'newERC20DAppFactory',
        ...config,
    } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20DAppSystemABI}__.
 *
 *
 */
export function usePrepareErc20DAppSystemWrite<TFunctionName extends string>(
    config: Omit<
        UsePrepareContractWriteConfig<typeof erc20DAppSystemABI, TFunctionName>,
        'abi' | 'address'
    > & { chainId?: keyof typeof erc20DAppSystemAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: erc20DAppSystemABI,
        address: erc20DAppSystemAddress[31337],
        ...config,
    } as UsePrepareContractWriteConfig<
        typeof erc20DAppSystemABI,
        TFunctionName
    >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20DAppSystemABI}__ and `functionName` set to `"newERC20DAppFactory"`.
 *
 *
 */
export function usePrepareErc20DAppSystemNewErc20DAppFactory(
    config: Omit<
        UsePrepareContractWriteConfig<
            typeof erc20DAppSystemABI,
            'newERC20DAppFactory'
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof erc20DAppSystemAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: erc20DAppSystemABI,
        address: erc20DAppSystemAddress[31337],
        functionName: 'newERC20DAppFactory',
        ...config,
    } as UsePrepareContractWriteConfig<
        typeof erc20DAppSystemABI,
        'newERC20DAppFactory'
    >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20DAppSystemABI}__.
 *
 *
 */
export function useErc20DAppSystemEvent<TEventName extends string>(
    config: Omit<
        UseContractEventConfig<typeof erc20DAppSystemABI, TEventName>,
        'abi' | 'address'
    > & { chainId?: keyof typeof erc20DAppSystemAddress } = {} as any,
) {
    return useContractEvent({
        abi: erc20DAppSystemABI,
        address: erc20DAppSystemAddress[31337],
        ...config,
    } as UseContractEventConfig<typeof erc20DAppSystemABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20DAppSystemABI}__ and `eventName` set to `"ERC20DAppFactoryCreated"`.
 *
 *
 */
export function useErc20DAppSystemErc20DAppFactoryCreatedEvent(
    config: Omit<
        UseContractEventConfig<
            typeof erc20DAppSystemABI,
            'ERC20DAppFactoryCreated'
        >,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof erc20DAppSystemAddress } = {} as any,
) {
    return useContractEvent({
        abi: erc20DAppSystemABI,
        address: erc20DAppSystemAddress[31337],
        eventName: 'ERC20DAppFactoryCreated',
        ...config,
    } as UseContractEventConfig<
        typeof erc20DAppSystemABI,
        'ERC20DAppFactoryCreated'
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
    TFunctionName extends string,
    TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
        'abi'
    > = {} as any,
) {
    return useContractRead({
        abi: erc20ABI,
        ...config,
    } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<
    TFunctionName extends 'allowance',
    TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
        'abi' | 'functionName'
    > = {} as any,
) {
    return useContractRead({
        abi: erc20ABI,
        functionName: 'allowance',
        ...config,
    } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<
    TFunctionName extends 'balanceOf',
    TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
        'abi' | 'functionName'
    > = {} as any,
) {
    return useContractRead({
        abi: erc20ABI,
        functionName: 'balanceOf',
        ...config,
    } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<
    TFunctionName extends 'decimals',
    TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
        'abi' | 'functionName'
    > = {} as any,
) {
    return useContractRead({
        abi: erc20ABI,
        functionName: 'decimals',
        ...config,
    } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<
    TFunctionName extends 'name',
    TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
        'abi' | 'functionName'
    > = {} as any,
) {
    return useContractRead({
        abi: erc20ABI,
        functionName: 'name',
        ...config,
    } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<
    TFunctionName extends 'symbol',
    TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
        'abi' | 'functionName'
    > = {} as any,
) {
    return useContractRead({
        abi: erc20ABI,
        functionName: 'symbol',
        ...config,
    } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<
    TFunctionName extends 'totalSupply',
    TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
        'abi' | 'functionName'
    > = {} as any,
) {
    return useContractRead({
        abi: erc20ABI,
        functionName: 'totalSupply',
        ...config,
    } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
    TFunctionName extends string,
    TMode extends WriteContractMode = undefined,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof erc20ABI,
                  string
              >['request']['abi'],
              TFunctionName,
              TMode
          >
        : UseContractWriteConfig<typeof erc20ABI, TFunctionName, TMode> & {
              abi?: never
          } = {} as any,
) {
    return useContractWrite<typeof erc20ABI, TFunctionName, TMode>({
        abi: erc20ABI,
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode = undefined>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof erc20ABI,
                  'approve'
              >['request']['abi'],
              'approve',
              TMode
          > & { functionName?: 'approve' }
        : UseContractWriteConfig<typeof erc20ABI, 'approve', TMode> & {
              abi?: never
              functionName?: 'approve'
          } = {} as any,
) {
    return useContractWrite<typeof erc20ABI, 'approve', TMode>({
        abi: erc20ABI,
        functionName: 'approve',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode = undefined>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof erc20ABI,
                  'transfer'
              >['request']['abi'],
              'transfer',
              TMode
          > & { functionName?: 'transfer' }
        : UseContractWriteConfig<typeof erc20ABI, 'transfer', TMode> & {
              abi?: never
              functionName?: 'transfer'
          } = {} as any,
) {
    return useContractWrite<typeof erc20ABI, 'transfer', TMode>({
        abi: erc20ABI,
        functionName: 'transfer',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<
    TMode extends WriteContractMode = undefined,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof erc20ABI,
                  'transferFrom'
              >['request']['abi'],
              'transferFrom',
              TMode
          > & { functionName?: 'transferFrom' }
        : UseContractWriteConfig<typeof erc20ABI, 'transferFrom', TMode> & {
              abi?: never
              functionName?: 'transferFrom'
          } = {} as any,
) {
    return useContractWrite<typeof erc20ABI, 'transferFrom', TMode>({
        abi: erc20ABI,
        functionName: 'transferFrom',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20IncreaseAllowance<
    TMode extends WriteContractMode = undefined,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof erc20ABI,
                  'increaseAllowance'
              >['request']['abi'],
              'increaseAllowance',
              TMode
          > & { functionName?: 'increaseAllowance' }
        : UseContractWriteConfig<
              typeof erc20ABI,
              'increaseAllowance',
              TMode
          > & {
              abi?: never
              functionName?: 'increaseAllowance'
          } = {} as any,
) {
    return useContractWrite<typeof erc20ABI, 'increaseAllowance', TMode>({
        abi: erc20ABI,
        functionName: 'increaseAllowance',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20DecreaseAllowance<
    TMode extends WriteContractMode = undefined,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof erc20ABI,
                  'decreaseAllowance'
              >['request']['abi'],
              'decreaseAllowance',
              TMode
          > & { functionName?: 'decreaseAllowance' }
        : UseContractWriteConfig<
              typeof erc20ABI,
              'decreaseAllowance',
              TMode
          > & {
              abi?: never
              functionName?: 'decreaseAllowance'
          } = {} as any,
) {
    return useContractWrite<typeof erc20ABI, 'decreaseAllowance', TMode>({
        abi: erc20ABI,
        functionName: 'decreaseAllowance',
        ...config,
    } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
    config: Omit<
        UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
        'abi'
    > = {} as any,
) {
    return usePrepareContractWrite({
        abi: erc20ABI,
        ...config,
    } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
    config: Omit<
        UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>,
        'abi' | 'functionName'
    > = {} as any,
) {
    return usePrepareContractWrite({
        abi: erc20ABI,
        functionName: 'approve',
        ...config,
    } as UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
    config: Omit<
        UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>,
        'abi' | 'functionName'
    > = {} as any,
) {
    return usePrepareContractWrite({
        abi: erc20ABI,
        functionName: 'transfer',
        ...config,
    } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
    config: Omit<
        UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>,
        'abi' | 'functionName'
    > = {} as any,
) {
    return usePrepareContractWrite({
        abi: erc20ABI,
        functionName: 'transferFrom',
        ...config,
    } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20IncreaseAllowance(
    config: Omit<
        UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>,
        'abi' | 'functionName'
    > = {} as any,
) {
    return usePrepareContractWrite({
        abi: erc20ABI,
        functionName: 'increaseAllowance',
        ...config,
    } as UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20DecreaseAllowance(
    config: Omit<
        UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>,
        'abi' | 'functionName'
    > = {} as any,
) {
    return usePrepareContractWrite({
        abi: erc20ABI,
        functionName: 'decreaseAllowance',
        ...config,
    } as UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
    config: Omit<
        UseContractEventConfig<typeof erc20ABI, TEventName>,
        'abi'
    > = {} as any,
) {
    return useContractEvent({
        abi: erc20ABI,
        ...config,
    } as UseContractEventConfig<typeof erc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
    config: Omit<
        UseContractEventConfig<typeof erc20ABI, 'Approval'>,
        'abi' | 'eventName'
    > = {} as any,
) {
    return useContractEvent({
        abi: erc20ABI,
        eventName: 'Approval',
        ...config,
    } as UseContractEventConfig<typeof erc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
    config: Omit<
        UseContractEventConfig<typeof erc20ABI, 'Transfer'>,
        'abi' | 'eventName'
    > = {} as any,
) {
    return useContractEvent({
        abi: erc20ABI,
        eventName: 'Transfer',
        ...config,
    } as UseContractEventConfig<typeof erc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Read<
    TFunctionName extends string,
    TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
        'abi'
    > = {} as any,
) {
    return useContractRead({
        abi: erc721ABI,
        ...config,
    } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721BalanceOf<
    TFunctionName extends 'balanceOf',
    TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
        'abi' | 'functionName'
    > = {} as any,
) {
    return useContractRead({
        abi: erc721ABI,
        functionName: 'balanceOf',
        ...config,
    } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721GetApproved<
    TFunctionName extends 'getApproved',
    TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
        'abi' | 'functionName'
    > = {} as any,
) {
    return useContractRead({
        abi: erc721ABI,
        functionName: 'getApproved',
        ...config,
    } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721IsApprovedForAll<
    TFunctionName extends 'isApprovedForAll',
    TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
        'abi' | 'functionName'
    > = {} as any,
) {
    return useContractRead({
        abi: erc721ABI,
        functionName: 'isApprovedForAll',
        ...config,
    } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"name"`.
 */
export function useErc721Name<
    TFunctionName extends 'name',
    TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
        'abi' | 'functionName'
    > = {} as any,
) {
    return useContractRead({
        abi: erc721ABI,
        functionName: 'name',
        ...config,
    } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721OwnerOf<
    TFunctionName extends 'ownerOf',
    TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
        'abi' | 'functionName'
    > = {} as any,
) {
    return useContractRead({
        abi: erc721ABI,
        functionName: 'ownerOf',
        ...config,
    } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721Symbol<
    TFunctionName extends 'symbol',
    TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
        'abi' | 'functionName'
    > = {} as any,
) {
    return useContractRead({
        abi: erc721ABI,
        functionName: 'symbol',
        ...config,
    } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useErc721TokenByIndex<
    TFunctionName extends 'tokenByIndex',
    TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
        'abi' | 'functionName'
    > = {} as any,
) {
    return useContractRead({
        abi: erc721ABI,
        functionName: 'tokenByIndex',
        ...config,
    } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721TokenUri<
    TFunctionName extends 'tokenURI',
    TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
        'abi' | 'functionName'
    > = {} as any,
) {
    return useContractRead({
        abi: erc721ABI,
        functionName: 'tokenURI',
        ...config,
    } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc721TotalSupply<
    TFunctionName extends 'totalSupply',
    TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
        'abi' | 'functionName'
    > = {} as any,
) {
    return useContractRead({
        abi: erc721ABI,
        functionName: 'totalSupply',
        ...config,
    } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Write<
    TFunctionName extends string,
    TMode extends WriteContractMode = undefined,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof erc721ABI,
                  string
              >['request']['abi'],
              TFunctionName,
              TMode
          >
        : UseContractWriteConfig<typeof erc721ABI, TFunctionName, TMode> & {
              abi?: never
          } = {} as any,
) {
    return useContractWrite<typeof erc721ABI, TFunctionName, TMode>({
        abi: erc721ABI,
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721Approve<TMode extends WriteContractMode = undefined>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof erc721ABI,
                  'approve'
              >['request']['abi'],
              'approve',
              TMode
          > & { functionName?: 'approve' }
        : UseContractWriteConfig<typeof erc721ABI, 'approve', TMode> & {
              abi?: never
              functionName?: 'approve'
          } = {} as any,
) {
    return useContractWrite<typeof erc721ABI, 'approve', TMode>({
        abi: erc721ABI,
        functionName: 'approve',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721SafeTransferFrom<
    TMode extends WriteContractMode = undefined,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof erc721ABI,
                  'safeTransferFrom'
              >['request']['abi'],
              'safeTransferFrom',
              TMode
          > & { functionName?: 'safeTransferFrom' }
        : UseContractWriteConfig<
              typeof erc721ABI,
              'safeTransferFrom',
              TMode
          > & {
              abi?: never
              functionName?: 'safeTransferFrom'
          } = {} as any,
) {
    return useContractWrite<typeof erc721ABI, 'safeTransferFrom', TMode>({
        abi: erc721ABI,
        functionName: 'safeTransferFrom',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721SetApprovalForAll<
    TMode extends WriteContractMode = undefined,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof erc721ABI,
                  'setApprovalForAll'
              >['request']['abi'],
              'setApprovalForAll',
              TMode
          > & { functionName?: 'setApprovalForAll' }
        : UseContractWriteConfig<
              typeof erc721ABI,
              'setApprovalForAll',
              TMode
          > & {
              abi?: never
              functionName?: 'setApprovalForAll'
          } = {} as any,
) {
    return useContractWrite<typeof erc721ABI, 'setApprovalForAll', TMode>({
        abi: erc721ABI,
        functionName: 'setApprovalForAll',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721TransferFrom<
    TMode extends WriteContractMode = undefined,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof erc721ABI,
                  'transferFrom'
              >['request']['abi'],
              'transferFrom',
              TMode
          > & { functionName?: 'transferFrom' }
        : UseContractWriteConfig<typeof erc721ABI, 'transferFrom', TMode> & {
              abi?: never
              functionName?: 'transferFrom'
          } = {} as any,
) {
    return useContractWrite<typeof erc721ABI, 'transferFrom', TMode>({
        abi: erc721ABI,
        functionName: 'transferFrom',
        ...config,
    } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function usePrepareErc721Write<TFunctionName extends string>(
    config: Omit<
        UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>,
        'abi'
    > = {} as any,
) {
    return usePrepareContractWrite({
        abi: erc721ABI,
        ...config,
    } as UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721Approve(
    config: Omit<
        UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>,
        'abi' | 'functionName'
    > = {} as any,
) {
    return usePrepareContractWrite({
        abi: erc721ABI,
        functionName: 'approve',
        ...config,
    } as UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721SafeTransferFrom(
    config: Omit<
        UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>,
        'abi' | 'functionName'
    > = {} as any,
) {
    return usePrepareContractWrite({
        abi: erc721ABI,
        functionName: 'safeTransferFrom',
        ...config,
    } as UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721SetApprovalForAll(
    config: Omit<
        UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>,
        'abi' | 'functionName'
    > = {} as any,
) {
    return usePrepareContractWrite({
        abi: erc721ABI,
        functionName: 'setApprovalForAll',
        ...config,
    } as UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721TransferFrom(
    config: Omit<
        UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>,
        'abi' | 'functionName'
    > = {} as any,
) {
    return usePrepareContractWrite({
        abi: erc721ABI,
        functionName: 'transferFrom',
        ...config,
    } as UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Event<TEventName extends string>(
    config: Omit<
        UseContractEventConfig<typeof erc721ABI, TEventName>,
        'abi'
    > = {} as any,
) {
    return useContractEvent({
        abi: erc721ABI,
        ...config,
    } as UseContractEventConfig<typeof erc721ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721ApprovalEvent(
    config: Omit<
        UseContractEventConfig<typeof erc721ABI, 'Approval'>,
        'abi' | 'eventName'
    > = {} as any,
) {
    return useContractEvent({
        abi: erc721ABI,
        eventName: 'Approval',
        ...config,
    } as UseContractEventConfig<typeof erc721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721ApprovalForAllEvent(
    config: Omit<
        UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>,
        'abi' | 'eventName'
    > = {} as any,
) {
    return useContractEvent({
        abi: erc721ABI,
        eventName: 'ApprovalForAll',
        ...config,
    } as UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721TransferEvent(
    config: Omit<
        UseContractEventConfig<typeof erc721ABI, 'Transfer'>,
        'abi' | 'eventName'
    > = {} as any,
) {
    return useContractEvent({
        abi: erc721ABI,
        eventName: 'Transfer',
        ...config,
    } as UseContractEventConfig<typeof erc721ABI, 'Transfer'>)
}
